import { Disposable, CancellationToken, ProviderResult, Diagnostic as VDiagnostic, TextDocument, Event as VEvent, EventEmitter } from 'vscode';
import { Proposed, ClientCapabilities, ServerCapabilities, DocumentSelector } from 'vscode-languageserver-protocol';
import { TextDocumentFeature, BaseLanguageClient } from './client';
export declare type VDiagnosticResult = {
    items: VDiagnostic[];
} | {
    unmodified: true;
};
export declare namespace VDiagnosticResult {
    function hasItems(value: VDiagnosticResult): value is VDiagnosticResult & {
        items: VDiagnostic[];
    };
}
export interface DiagnosticProvider {
    onDidChangeDiagnostics: VEvent<void>;
    provideDiagnostics(textDocument: TextDocument, context: Proposed.DiagnosticContext, token: CancellationToken): ProviderResult<VDiagnosticResult>;
}
export interface ProvideDiagnosticSignature {
    (this: void, textDocument: TextDocument, context: Proposed.DiagnosticContext, token: CancellationToken): ProviderResult<VDiagnosticResult>;
}
export interface DiagnosticProviderMiddleware {
    provideDiagnostics?: (this: void, document: TextDocument, context: Proposed.DiagnosticContext, token: CancellationToken, next: ProvideDiagnosticSignature) => ProviderResult<VDiagnosticResult>;
}
export interface DiagnosticProviders {
    onDidChangeDiagnosticsEmitter: EventEmitter<void>;
    provider: DiagnosticProvider;
}
export declare class DiagnosticFeature extends TextDocumentFeature<boolean | Proposed.DiagnosticOptions, Proposed.DiagnosticRegistrationOptions, DiagnosticProviders> {
    private readonly openFeature;
    private readonly changeFeature;
    private readonly saveFeature;
    private readonly closeFeature;
    constructor(client: BaseLanguageClient);
    fillClientCapabilities(capabilities: ClientCapabilities & Proposed.$DiagnosticClientCapabilities): void;
    initialize(capabilities: ServerCapabilities & Proposed.$DiagnosticServerCapabilities, documentSelector: DocumentSelector): void;
    protected registerLanguageProvider(options: Proposed.DiagnosticRegistrationOptions): [Disposable, DiagnosticProviders];
}
